#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright: 2015 Jingyi Xiao
# FileName: Predictor.py
# Date: 2016 Sat 16 Jul 2016 09:52:01 PM CST
# Encoding: utf-8
# Author: Jingyi Xiao <kxwarning@126.com>
# Note: This source file is NOT a freeware

__author__="Jingyi"

import os, sys, time
import numpy as np
sys.path.append("/datas/lib/py")
sys.path.append("../libs")
from PredictorBase import PredictorBase
from lib.Util import *

os.environ['NLS_LANG'] = 'SIMPLIFIED CHINESE_CHINA.UTF8'

class Predictor(PredictorBase):
    def __init__(self, config):
        if not config:
            self.bail(-1, "no config: Predictor init")
        self.config = config
        self.debug = config["debug"]
        super(Predictor, self).__init__(config)
        self.f_iter = 0
    
    def mkData(self):
        X, y, y_ = self.loadH5("./caffe/data_0.h5")
        Xt, yt, yt_ = self.loadH5("./caffe/data_1.h5")
        return X, y, Xt, yt, yt_

    def resTest(self, ls, issort=True):
        fname="predictor_test_%d.csv" % self.f_iter
        self.f_iter += 1
        if issort:
            ls = sorted(ls, key=lambda x: x[0], reverse=False)
        csv_data = []
        err = {
                "good":[], 
                "crr_good": [],
                "total":[], 
                "profit":[],
                "potential":[],
                }

        crr_count = 200
        for one in ls:
            a, l, yi_ = one
            if l == 1:
                err['profit'].append(yi_)
                if yi_ > 0:
                    err["good"].append(1)
                    err["crr_good"].append(1)
                else:
                    err["good"].append(0)
                    err["crr_good"].append(0)
                err['total'].append(1)
                err['potential'].append(abs(yi_))
            elif l == 2:
                err['profit'].append(-yi_)
                if yi_ < 0:
                    err["good"].append(1)
                    err["crr_good"].append(1)
                else:
                    err["good"].append(0)
                    err["crr_good"].append(0)
                err['total'].append(1)
                err['potential'].append(abs(yi_))
            
            if len(err['total']) > 0:
                if len(err["crr_good"]) > crr_count:
                    del err["crr_good"][0]
                crr_acc = sum(err["crr_good"]) * 1.0 / crr_count
                good = sum(err['good'])
                total = sum(err['total'])
                profit = sum(err['profit'])
                potential = sum(err['potential'])

                acc = good * 1.0 / total
                profit_per = profit / potential
                csv_data.append([
                    acc, profit_per,
                    crr_acc,
                    total,
                    profit,
                    potential,
                    ])
        mkCsvFileSimple(fname, csv_data)
        print "created: ", fname
        return

    def test(self):
        self.setTData()
        batch_test = self.data_handler.loadTests()
        Xt = batch_test[0].astype(np.float32)
        yt = batch_test[1].astype(np.float32)
        yt_ = batch_test[2].astype(np.float32)
        print Xt.shape
        print yt.shape
        print yt_.shape
        self.initNet(sys.argv[1], sys.argv[2])

        """
        res_p = self.predict(Xt, True)
        ls = map(lambda x: 
                [
                    1 - x[np.argmax(x)],
                    #1 if x[1] > x[2] else 2,
                    np.argmax(x),
                    ], 
                res_p)
        ls = np.array(ls)
        yt_.shape = (yt_.shape[0], 1)
        ls = np.concatenate((ls, yt_), axis=1)

        self.resTest(ls)
        """

        res_p = self.predict(Xt, False)
        ls = map(lambda x: 
                [
                    1 - x[np.argmax(x)],
                    #1 if x[1] > x[2] else 2,
                    np.argmax(x),
                    ], 
                res_p)
        ls = np.array(ls)
        yt_.shape = (yt_.shape[0], 1)
        ls = np.concatenate((ls, yt_), axis=1)

        self.resTest(ls)
        self.resTest(ls, False)

    def run(self):
        self.test()

    def testPrint(self):
        print "Hello World!"

    def bail(self, sig, msg):
        print sig, ": ", msg
        exit()

def main():
    conf = {
            "debug": True,
            "data_init_len": 500,
            "cluster_number": 3,
            "data_growth": 0.2,
            "data_shape": (1, 1, 4012), #TODO
            "batch_len": 128 * 1,
            "dcache_prefix": "alex",
            "data_type": "DataStockRange",
            "is_sim": False,
            }
    t = Predictor(conf)
    t.run()
    return

if __name__ == "__main__":
    main()

# Modeline for ViM {{{
# vim:set ts=4:
# vim600:fdm=marker fdl=0 fdc=3:
# }}}

